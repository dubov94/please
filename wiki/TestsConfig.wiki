=Конфигурирование тестов=
...происходит посредством правки файла tests.please. Каждая строчка в этом файле описывает очередную тест-серию, может быть нескольких видов:

  * echo PARAMS (echo 1 2 3)
  * PATH_TO_GENERATOR PARAMS (generator.cpp 100500, может быть *мультигенератором*)
  * MASK_OF_TEST_FILE_NAME (tests/test[0-9].?, ручные тесты, задаются с помощью *маски*)
  * python PYTHON_CODE_STRING ( 'ab' `*` 10, выражение, вычислимое с помощью python'овского eval())

Также возможны теги вначале каждой строки в квадратных скобках, например `[tag1, tag2=132, tag3=cat, tag4]`. Теги нужны, чтобы генерировать конкретные виды тестов посредством команды please generate tests with tag`[s]` TAGS_LIST.

_*Hint!*_ Тег sample означает, что данный тест будет включён в условия при их составлении.

Комментарий оформляется как `# comment` (`[sample] generator.cpp 17 # type your comment here`)

==Мультигенераторы==
Если генератор пишет в файлы, то эти файлы считаются тестами. Маски отбираемых файлов можно задать в тегах при помощи ключевых слов mask и exclude, означающих, соответственно, маски включаемых и исключаемых файлов из сгенерированных ([sample, mask = tests/*, exclude = tests/2] mult.cpp). По умолчанию для мультигенераторов включаются все файлы.
Если генератор не пишет в файлы, то тестом считается вывод в stdout (весь).

==Маска==
Используется следующая маска (подробнее - маска glob.glob()):
  # `*` означает любую последовательность символов, задающих папку или файл на текущем уровне
  # ? означает один произвольный символ
  # `[range]` задаёт диапазон допустимого символа
  # / означает спуск на директорию ниже

===Пример маски:===
`*`/`*`st/?.in - переберёт на текущем уровне все папки и файлы, отберёт из них только папки, в них отберёт все папки, оканчивающиеся на "st", в них отберёт файлы, в которых 4 символа и последние 3 - ".in". Эти файлы и будут тестами