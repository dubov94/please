#summary Список задач, вопросов и мыслей.
#labels Phase-Design,Featured

= Ближайшие шаги =

  * [dg] лог под Windows
  * [vg] ProblemCommand
  * [dg] alias для команд
  * [vg] вынести file_system в context
  * [dg] описать формат generate.please
  * sandbox смотрит на появившиеся файлы
  * [dg] второй лог для операций, производимых please
  * run tools

= Предстоит сделать =

  * сделать несколько задач в предлагаемом формате, выложить их в `examples`
  * написать `please.py`
  * сделать систему тегов
  * импортировать много задач из стандартных источников, найти проблемы предлагаемого формата
  * поднять svn-сервер, сделать на нём hook scripts, проверяющий корректность коммита
  * сделать веб-сервер, позволяющий работать с задачами в браузере.
  * договориться с авторами `olymp.sty`, `testlib4j.jar` (?), `testlib.pas` о разрешении создания ветки проекта. Ветки стоит сделать в отдельных проектах на code.google.com
  * поэкстернить testlib.h 
  * создать отдельный проект genlib.

= please.py =
  * написать logging.py
  * написать работу с файлами и sandbox
  * написать рабочие классы: задача, чекер, валидатор, компилятор и прочее
  * реализовать команды для задачи
  * реализовать импорт
  * проверить все TODO в исходниках и поправить :)

= Формат задач =
  * Продумать формат условий задач
    * придется переделать `olymp.sty` (?)
    * завести единый `olymp.sty`, поставляемый вместе с `please`
    * как быть с зависимостями вида `includegraphics{../pics/1.mp}`
    * условия могут требовать установки `LaTeX`-овских пакетов. Их список можно вынести отдельно (в `problem.properties`?)

  * Валидатор — вместо него может быть одно из решений

  * Стандартные чекеры и валидаторы
    * как называть?
    * поставляются с утилитой `please`?

= Формат контестов =
  * Придумать!