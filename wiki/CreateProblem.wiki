==Создание задачи==
=Автоопределитель ошибок=
Если написать какую-либо команду с одной ошибкой, программа самостоятельно догадается, что это должно было быть.
=Напоминание=
Прежде чем запускать:
  * generate answers
  * validate tests
  * compute TL
  * check solutions
и т.п., тесты должны быть *_уже сгенерированы_*!
=Создание=
Переместимся в директорию, в которой хотим создать задачу. Теперь создадим пустой макет для нашей задачи.
{{{
~$ please create problem cubes
Untitle(INFO) [01:40:23]: Problem cubes created successfully
}}}
Зайдём в папку с задачей и посмотрим, что внутри.
{{{
~$ cd cubes
~/cubes$ ll
drwxr-xr-x  6 dubov94 dubov94  4096 2011-09-22 01:40 ./
drwxr-xr-x 61 dubov94 dubov94  4096 2011-09-22 01:40 ../
-rw-r--r--  1 dubov94 dubov94   133 2011-09-22 01:40 checker.cpp
-rw-r--r--  1 dubov94 dubov94   552 2011-09-22 01:40 default.package
drwxr-xr-x  2 dubov94 dubov94  4096 2011-09-22 01:40 .please/
drwxr-xr-x  2 dubov94 dubov94  4096 2011-09-22 01:40 solutions/
drwxr-xr-x  2 dubov94 dubov94  4096 2011-09-22 01:40 statements/
-rw-r--r--  1 dubov94 dubov94 56775 2011-09-22 01:40 testlib.h
-rw-r--r--  1 dubov94 dubov94 12076 2011-09-22 01:40 testlib.pas
drwxr-xr-x  2 dubov94 dubov94  4096 2011-09-22 01:40 tests/
-rw-r--r--  1 dubov94 dubov94     0 2011-09-22 01:40 tests.please
-rw-r--r--  1 dubov94 dubov94   107 2011-09-22 01:40 validator.cpp
}}}
  * tests - папка с ручными тестами
  * solutions - папка со всеми решениями, лежит заготовка на cpp
  * statements - папка со всеми условиями, лежат две заготовки, для описания (description.ru.tex) и непосредственно условий (default.ru.tex). В перспективе развития please - много условий на разных языках, но пока нет, поэтому не обращаем внимания на `*`.ru
  * checker.cpp, validator.cpp - заготовки понятно чего
  * .please - папка с файлом time.config, в котором уникальная метка времени создания задачи
  * testlib.h, testlib.pas - джентельменский набор (писать генераторы, чекеры и валидаторы)
  * default.package - см. конфигурирование параметров
  * tests.please - см. конфигурирование тестов
Теперь что со всем этим можно делать, когда все конфиги прописаны.
=Жизнь после конфигурирования=
Прежде всего нужно понять, что без предварительно сгенерированных тестов ничего проверяться не будет. Генерируются они следующей командой:
{{{
~/<problem name>$ please generate tests
cubes(INFO) [02:02:30]: Generating 21 tests
cubes(INFO) [02:02:30]: Test #1 generated
cubes(INFO) [02:02:30]: Test #2 generated
cubes(INFO) [02:02:30]: Test #3 generated
cubes(INFO) [02:02:30]: Test #4 generated
cubes(INFO) [02:02:30]: Compiling: path:generator_random.cpp
cubes(INFO) [02:02:31]: Test #5 generated
...
cubes(INFO) [02:02:33]: Test #19 generated
cubes(INFO) [02:02:33]: Compiling: path:generator_max.cpp
cubes(INFO) [02:02:34]: Test #20 generated
cubes(INFO) [02:02:34]: Test #21 generated
cubes(INFO) [02:02:34]: Start validator on test: .tests/1
cubes(INFO) [02:02:34]: Compiling: path:validator.cpp
cubes(INFO) [02:02:36]: Validating .tests/1 by validator.cpp
cubes(INFO) [02:02:36]: Start validator on test: .tests/2
cubes(INFO) [02:02:36]: Validating .tests/2 by validator.cpp
...
cubes(INFO) [02:02:38]: Start validator on test: .tests/21
cubes(INFO) [02:02:38]: Validating .tests/21 by validator.cpp
cubes(INFO) [02:02:38]: Generating answer for .tests/1 with solutions/solution.py
cubes(INFO) [02:02:38]: Generating answer for .tests/2 with solutions/solution.py
...
cubes(INFO) [02:02:50]: Generating answer for .tests/21 with solutions/solution.py
}}}
Заметим, что они заодно провалидировались и ответы к ним (по main solution) составились.
Ещё можно задать теги (please generate tests with tag`[s]` ...), тогда будут браться тесты только с заданными тегами. Смотрите please help.
<br><br>
Теперь у нас есть некий набор тестов, который хранится в .tests. Да-да, у нас появилась новая папка. Так вот, представим, что мы заметили ошибку в валидаторе, и хотим заново провалидировать уже готовые тесты. Тогда сделаем так:
{{{
~/cubes$ please validate tests
cubes(INFO) [02:11:42]: Start validator on test: .tests/1
cubes(INFO) [02:11:42]: Validating .tests/1 by validator.cpp
cubes(INFO) [02:11:42]: Start validator on test: .tests/2
cubes(INFO) [02:11:42]: Validating .tests/2 by validator.cpp
cubes(INFO) [02:11:42]: Start validator on test: .tests/3
cubes(INFO) [02:11:42]: Validating .tests/3 by validator.cpp
}}}
Если что-то пойдёт не так, нас ждёт сюрприз:
{{{
cubes(ERROR) [02:13:16]: Validator executions has had RE
cubes(ERROR) [02:13:16]: 
STDERR:
}}}
Также можно перегенерировать ответы, please generate answers.
=Проверка решений=
Допустим, что мы уже прописали в конфиге все решения, и сгенерировали все тесты. Тогда мы можем проверять различные решения, например, главное:
{{{
~/cubes$ please check main solution
cubes(INFO) [00:47:15]: Testing solutions/solution.py on .tests/1
cubes(INFO) [00:47:15]: Testing solutions/solution.py on .tests/2
...
cubes(INFO) [00:47:29]: Testing solutions/solution.py on .tests/21

----------------------------------
| Test # | solutions/solution.py | 
----------------------------------
|      1 | OK T=0.09s RT=0.10s   | 
----------------------------------
|      2 | OK T=0.09s RT=0.10s   | 
----------------------------------
...
----------------------------------
|     21 | OK T=1.11s RT=1.12s   | 
----------------------------------

Total:  21
Failed: 0
Passed: 21
}}}
Какое-нибудь конкретное:
{{{
/cubes$ please check solution solutions/solution_wrong.cpp
cubes(INFO) [00:49:20]: Testing solutions/solution_wrong.cpp on .tests/1
cubes(INFO) [00:49:20]: Testing solutions/solution_wrong.cpp on .tests/2
...
cubes(INFO) [00:49:23]: Testing solutions/solution_wrong.cpp on .tests/21
cubes(INFO) [00:49:24]: 
STDERR:


-----------------------------------------
| Test # | solutions/solution_wrong.cpp | 
-----------------------------------------
|      1 | OK T=0.00s RT=0.00s          | 
-----------------------------------------
|      2 | OK T=0.00s RT=0.00s          | 
-----------------------------------------
...
-----------------------------------------
|     21 | RE T=0.00s RT=0.00s          | 
-----------------------------------------

Total:  21
Failed: 5
Passed: 16
}}}
Или же все вместе командой please check solutions.
=Ожидаемые вердикты=
Если в конфиге указаны ожидаемые и возможные вердикты, проверить, насколько это соответствует действительности на текущих тестах можно, выполнив команду please generate html report. Будет создан файл report.html с количеством таблиц, соответствующим количеству решений, в таблице каждая строчка - результат на очередном тесте, под таблицей, в случае каких-либо несоответствий, будет указаны "expected but not met" и "not expected but met" вердикты.
=Автоконфигурирование TL=
Также можно автоматически выставлять TL в конфиг: будет протестировано главное решение и прописано удвоенное максимальное время выполнения. Вывод ничем не примечателен:
{{{
/cubes$ please compute TL
cubes(INFO) [01:07:45]: Testing solutions/solution.py on .tests/1
cubes(INFO) [01:07:45]: Testing solutions/solution.py on .tests/2
...
cubes(INFO) [01:08:00]: Testing solutions/solution.py on .tests/21
}}}
А в default.package теперь записано:
{{{
...
output = stdout
time_limit = 2.3
memory_limit = 256
...
}}}
Ещё есть возможность записать то же самое число, но округлённое вверх. Делается это командой please compute integer TL. Содержимое default.package после этого:
{{{
...
output = stdout
time_limit = 3
memory_limit = 256
...
}}}
=Стресс-тестирование=
Для того, чтобы провести стресс-тестирование, нужно выполнить следующий алгоритм.
  # Написать генератор, который создаёт различные тесты в зависимости от первого переданного в main значения
  # Написать верное решение
  # Написать любое другое решение
  # Выполнить команду please stress test SOLUTION CORRECT_SOLUTION GENERATOR, полагаю, переменные ясны. Если верное решение прописано как главное в конфиге задачи, параметр CORRECT_SOLUTION можно опустить.

Примеры:
{{{
~/cubes$ please stress test solutions/solution_wrong.cpp solutions/solution.cpp generator_random.cpp
cubes(WARNING) [01:35:03]: Random number for generator is: 476230
cubes(INFO) [01:35:03]: Generating 1 tests
cubes(INFO) [01:35:03]: Test #1 generated
cubes(INFO) [01:35:03]: Test passed
cubes(WARNING) [01:35:03]: Random number for generator is: 834591
cubes(INFO) [01:35:03]: Generating 1 tests
cubes(INFO) [01:35:04]: Test #1 generated
cubes(INFO) [01:35:04]: Test passed
cubes(WARNING) [01:35:11]: Random number for generator is: 765094
cubes(INFO) [01:35:11]: Generating 1 tests
cubes(INFO) [01:35:11]: Test #1 generated
cubes(ERROR) [01:35:12]: Answers do not match, correct answer saved to .please/correct.a, incorrect to .please/incorrect.a, test saved to .please/input.test
cubes(ERROR) [01:35:12]: Test failed
}}}
{{{
~/cubes$ please stress test solutions/solution_wrong.cpp generator_random.cpp
cubes(WARNING) [01:36:23]: Random number for generator is: 715347
cubes(INFO) [01:36:23]: Generating 1 tests
cubes(INFO) [01:36:23]: Test #1 generated
cubes(INFO) [01:36:24]: Test passed
cubes(WARNING) [01:36:24]: Random number for generator is: 216341
cubes(INFO) [01:36:24]: Generating 1 tests
cubes(INFO) [01:36:24]: Test #1 generated
cubes(ERROR) [01:36:25]: Run exception: solutions/solution_wrong.cpp is not OK, invoker returned RE, return code 11
cubes(ERROR) [01:36:25]: Solution solutions/solution_wrong.cpp failed to run
cubes(ERROR) [01:36:25]: Test failed
}}}
=Условия=
please generate statement создаст pdf на основе tex'овского файла условий, указанного в default.package, и тестов, помеченных sample.
=Всего и сразу=
please build all <=>
  * please generate tests
  * please generate statement
  * please check solutions
=Очистить от мусора=
please clean удалит логи, исполняемые файлы всего, что прописано в default.package и pdf.